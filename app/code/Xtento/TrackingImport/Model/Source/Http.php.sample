<?php

/**
 * Product:       Xtento_TrackingImport (2.1.9)
 * ID:            pla2jYgPEb1bu8ncBMlGtw6aKM5PQ018LXPJPkLn5XM=
 * Packaged:      2017-06-01T10:43:01+00:00
 * Last Modified: 2016-04-11T13:40:35+00:00
 * File:          app/code/Xtento/TrackingImport/Model/Source/Http.php.sample
 * Copyright:     Copyright (c) 2017 XTENTO GmbH & Co. KG <info@xtento.com> / All rights reserved.
 */

namespace Xtento\TrackingImport\Model\Source;

class Http extends AbstractClass
{
    /*
     * !!!!! IMPORTANT !!!!!
     *
     * Modify below this line. Add custom functions, similar to the function below. Must return parameter $filesToProcess as in example below.
     */
    public function yourFunctionName()
    {
        $filesToProcess = [];
        // Do whatever - sample code for a HTTP request below.
        $curlClient = curl_init();
        curl_setopt($curlClient, CURLOPT_URL, '');
        curl_setopt($curlClient, CURLOPT_RETURNTRANSFER, 1);
        /*curl_setopt($curlClient, CURLOPT_POST, 1);
        curl_setopt($curlClient, CURLOPT_POSTFIELDS, []);*/
        curl_setopt($curlClient, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($curlClient, CURLOPT_SSL_VERIFYHOST, 0);
        $fileContents = curl_exec($curlClient);
        curl_close($curlClient);

        $filesToProcess[] = ['source_id' => $this->getSource()->getId(), 'path' => '', 'filename' => 'http_download', 'data' => $fileContents]; // Set a filename here. 'data' must contain the returned string from the HTTP source which will then be imported

        // Return files to process
        return $filesToProcess;
    }

    /* Another sample function */
    /*
    public function sampleFunctionName()
    {
        $filesToProcess = [];
        $filesToProcess[] = ['source_id' => $this->getSource()->getId(), 'path' => '', 'filename' => 'michael_kors.csv', 'data' => file_get_contents('http://www.url.to/csv.file')];
        return $filesToProcess;
    }
    */

     /*
      * !!!!! Do not modify below this line !!!!!
      */
     public function testConnection()
     {
         $this->initConnection();
         return $this->getTestResult();
     }

     public function initConnection()
     {
         $this->setSource($this->sourceFactory->create()->load($this->getSource()->getId()));
         $testResult = new \Magento\Framework\DataObject();
         $this->setTestResult($testResult);
         if (!@method_exists($this, $this->getSource()->getCustomFunction())) {
             $this->getTestResult()->setSuccess(false)->setMessage(__('Custom function/method \'%1\' not found in %2.', $this->getSource()->getCustomFunction(), __FILE__));
         } else {
             $this->getTestResult()->setSuccess(true)->setMessage(__('Custom function/method found and ready to use.', __FILE__));
         }
         $this->getSource()->setLastResult($this->getTestResult()->getSuccess())->setLastResultMessage($this->getTestResult()->getMessage())->save();
         return true;
     }

     public function loadFiles()
     {
         // Init connection
         $this->initConnection();
         // Call custom function
         $filesToProcess = @$this->{$this->getSource()->getCustomFunction()}();
         return $filesToProcess;
     }

     public function archiveFiles($filesToProcess, $forceDelete = false)
     {

     }
}