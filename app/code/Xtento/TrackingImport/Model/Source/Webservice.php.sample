<?php

/**
 * Product:       Xtento_TrackingImport (2.1.9)
 * ID:            pla2jYgPEb1bu8ncBMlGtw6aKM5PQ018LXPJPkLn5XM=
 * Packaged:      2017-06-01T10:43:01+00:00
 * Last Modified: 2017-03-22T19:23:18+00:00
 * File:          app/code/Xtento/TrackingImport/Model/Source/Webservice.php.sample
 * Copyright:     Copyright (c) 2017 XTENTO GmbH & Co. KG <info@xtento.com> / All rights reserved.
 */

namespace Xtento\TrackingImport\Model\Source;

class Webservice extends AbstractClass
{
    /*
     * !!!!! IMPORTANT !!!!!
     *
     * Modify below this line. Add custom functions, similar to the function below. Must return parameter $filesToProcess as in example below.
     */
    public function yourFunctionName()
    {
        $filesToProcess = [];
        $fileContents = "";

        // Do whatever - sample code for a API request below, must be modified so that $fileContents contains the contents (CSV/XML/...) to import.
        /*$client = new SoapClient("http://www.api.com/request.php?wsdl"); // Alternatively use another SOAP client
        try {
            $result = $client->get_order_status(array('user' => 'abc'));
        } catch (SoapFault $e) {
            #echo $e->getMessage(); die();
        }
        if ($fileContents && !empty($fileContents)) {

        }*/

        // Set a filename here. 'data' must contain the returned string from the HTTP source which will then be imported
        $filesToProcess[] = ['source_id' => $this->getSource()->getId(), 'path' => '', 'filename' => 'http_download', 'data' => $fileContents];

        // Return files to process
        return $filesToProcess;
    }

    /*
     * !!!!! Do not modify below this line !!!!!
     */
    public function testConnection()
    {
        $this->initConnection();
        if (!$this->getSource()->getBackupSource()) {
            $this->getSource()->setLastResult($this->getTestResult()->getSuccess())->setLastResultMessage($this->getTestResult()->getMessage())->save();
        }
        return $this->getTestResult();
    }

    public function initConnection()
    {
        $this->setSource($this->sourceFactory->create()->load($this->getSource()->getId()));
        $testResult = new \Magento\Framework\DataObject();
        $this->setTestResult($testResult);
        if (!@method_exists($this, $this->getSource()->getCustomFunction())) {
            $this->getTestResult()->setSuccess(false)->setMessage(__('Custom function/method \'%1\' not found in %2.', $this->getSource()->getCustomFunction(), __FILE__));
        } else {
            $this->getTestResult()->setSuccess(true)->setMessage(__('Custom function/method found and ready to use.', __FILE__));
        }
        return true;
    }

    public function loadFiles()
    {
        // Init connection
        $this->initConnection();
        // Call custom function
        $filesToProcess = @$this->{$this->getSource()->getCustomFunction()}();
        return $filesToProcess;
    }

    public function archiveFiles($filesToProcess, $forceDelete = false)
    {

    }
}